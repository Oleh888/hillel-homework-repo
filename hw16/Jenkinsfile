pipeline {
    agent {
        label 'docker-worker-node'
    }

    environment {
        GITHUB_ACCESS_TOKEN     = credentials('github-access-key')
    }

    triggers {
        pollSCM('*/5 * * * *')
    }

    stages {
        stage('Build and Push Docker Image') {
            steps {
                script {
                    def dockerImageTag = "${GIT_BRANCH}".replaceAll("/", "-")

                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS_ID', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker build -t oleh888/demo-app:${dockerImageTag} hw11"
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh "docker push oleh888/demo-app:${dockerImageTag}"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                currentBuild.result = 'SUCCESS'
                updateGitHubCommitStatus("success")
            }
        }
        failure {
            script {
                currentBuild.result = 'FAILURE'
                updateGitHubCommitStatus("failure")
            }
        }
    }
}

def updateGitHubCommitStatus(String status) {
    def commitSha = env.GIT_COMMIT
    def authHeader = "Bearer ${GITHUB_ACCESS_TOKEN}"

    def url = "https://api.github.com/repos/Oleh888/hillel-homework-repo/statuses/${commitSha}"
    def payload = """
    {
        "state": "${status}",
        "target_url": "${env.BUILD_URL}",
        "description": "Jenkins CI build ${status}",
        "context": "Jenkins CI"
    }
    """

    def response = httpRequest(
            acceptType: 'APPLICATION_JSON',
            contentType: 'APPLICATION_JSON',
            httpMode: 'POST',
            requestBody: payload,
            url: url,
            customHeaders: [
                    Authorization: authHeader
            ]
    )

    println("GitHub response status: ${response.status}")

}
